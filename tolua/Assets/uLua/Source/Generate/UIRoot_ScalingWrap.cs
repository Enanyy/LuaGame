//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIRoot_ScalingWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UIRoot.Scaling));
		L.RegVar("Flexible", get_Flexible, null);
		L.RegVar("Constrained", get_Constrained, null);
		L.RegVar("ConstrainedOnMobiles", get_ConstrainedOnMobiles, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<UIRoot.Scaling>.Check = CheckType;
		StackTraits<UIRoot.Scaling>.Push = Push;
	}

	static void Push(IntPtr L, UIRoot.Scaling arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(UIRoot.Scaling), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Flexible(IntPtr L)
	{
		ToLua.Push(L, UIRoot.Scaling.Flexible);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Constrained(IntPtr L)
	{
		ToLua.Push(L, UIRoot.Scaling.Constrained);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConstrainedOnMobiles(IntPtr L)
	{
		ToLua.Push(L, UIRoot.Scaling.ConstrainedOnMobiles);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UIRoot.Scaling o = (UIRoot.Scaling)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

