//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UITweener_StyleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UITweener.Style));
		L.RegVar("Once", get_Once, null);
		L.RegVar("Loop", get_Loop, null);
		L.RegVar("PingPong", get_PingPong, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<UITweener.Style>.Check = CheckType;
		StackTraits<UITweener.Style>.Push = Push;
	}

	static void Push(IntPtr L, UITweener.Style arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(UITweener.Style), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Once(IntPtr L)
	{
		ToLua.Push(L, UITweener.Style.Once);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Loop(IntPtr L)
	{
		ToLua.Push(L, UITweener.Style.Loop);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PingPong(IntPtr L)
	{
		ToLua.Push(L, UITweener.Style.PingPong);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UITweener.Style o = (UITweener.Style)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

